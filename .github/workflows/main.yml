name: Build and Upload EXE to Latest Release

on:
  workflow_dispatch:  # Allows manual triggering from the GitHub UI
  release:
    types: [published, prereleased]  # Trigger on both published and prereleased events

jobs:
  build:
    runs-on: windows-latest  # Use a Windows runner

    permissions:
      contents: read  # Required to checkout the code
      actions: write   # Required for the upload-release-asset action
      releases: write  # Allow the action to upload assets to releases

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.13.x'  # Choose the Python version you need

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install PySide6  # Changed from PyQt5 to PySide6

    - name: Install pyinstaller
      run: pip install pyinstaller  # Install pyinstaller to compile the EXE

    - name: Compile Python code into EXE
      run: |
        pyinstaller --noconfirm --onefile --windowed --icon "lib\mDirt.ico" --add-data "src\ui.py;." --add-data "src\item_models.json;." --add-data "src\item_list.json;." --add-data "src\item_select.py;." "src\main.py"

    - name: Create bin folder
      run: |
        New-Item -ItemType Directory -Force -Path ./bin  # Create the bin folder if it doesn't exist

    - name: Move EXE to bin folder
      run: |
        Remove-Item -Path ./bin/main.exe -Force -ErrorAction SilentlyContinue  # Remove the existing file if it exists
        Move-Item -Path ./dist/main.exe -Destination ./bin/main.exe  # Move the EXE to the bin folder

    - name: Get the latest release or prerelease
      id: release
      run: |
        RELEASE=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/latest | jq -r .upload_url)
        if [ "$RELEASE" == "null" ]; then
          echo "No release found, exiting."
          exit 1
        fi
        echo "Found latest release: $RELEASE"
        echo "upload_url=$RELEASE" >> $GITHUB_ENV

    - name: Upload EXE to GitHub Release
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ env.upload_url }}  # Use the latest release's upload URL
        asset_path: ./bin/main.exe  # Path to the EXE
        asset_name: main.exe  # Name of the asset for the release
        asset_content_type: application/octet-stream  # Set the correct content type
